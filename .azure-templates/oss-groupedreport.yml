# Copyright (c) 2020 - 2021 TomTom N.V. All rights reserved.
#
# This software is the proprietary copyright of TomTom N.V. and its subsidiaries and may be
# used for internal evaluation purposes or commercial use strictly subject to separate
# licensee agreement between you and TomTom. If you are the licensee, you are only permitted
# to use this Software in accordance with the terms of your license agreement. If you are
# not the licensee then you are not authorised to use this software in any manner and should
# immediately return it to TomTom N.V.

# Azure pipelines documentation is available at
# https://aka.ms/yaml

parameters:
  # configurationFilePath : location of the static configuration file used by BlackDuck for scanning.
  configurationFilePath: ''
  # product : name of the product to be scanned.
  product: ''
  # productVersion : semantic version of the project to be scanned.
  productVersion: ''
  # reportFilename: the name of the report.
  reportFilename: ''
  # repository : path of the repository to scan
  repository: '$(Build.Repository.Name)'
  # artifactoryLocation : the location in Artifactory where to publish the report.
  artifactoryLocation: ''
  # bdtoolsUrl: specifies which environment to publish the scan.
  bdtoolsUrl: ' '
  # bdApiToken: PAT for bd authentication for preprod and prod environments.
  bdApiToken: ''

steps:
  - checkout: self
  - bash: |
      set -e
      patch_version="$(echo '$(VERSION_EXAMPLES)' | cut -d'.' -f3)"
      echo "##vso[task.setvariable variable=PATCH_VERSION]${patch_version}"
    displayName: 'Create patch version variable'

  - task: PythonScript@0
    name: CompareVersions
    displayName: 'Check if scan is allowed'
    inputs:
      scriptSource: 'inline'
      pythonInterpreter: /usr/bin/python3.8
      script: |
        from semantic_version import Version

        scan_allowed = True
        if Version("$(VERSION_PLATFORM)-$(PATCH_VERSION)") <= Version("$(OSS_GROUP_REPORT_VERSION)"):
          print(
            "##vso[task.logissue type=warning;]OSS scan will be skipped. Group report for SDK "
            "version [$(VERSION_PLATFORM)-$(PATCH_VERSION)] is already available on artifactory."
          )
          scan_allowed = False
        print(f"##vso[task.setvariable variable=scanAllowed;isOutput=true]{scan_allowed}")

  - script: |
      echo "Create locked configuration"

      bdt config --repo-type=GIT \
                 --repository=${{parameters.repository}} \
                 --version=${{parameters.product}}:${{parameters.productVersion}} \
                 --git-tag-limit=500 \
                 --auto-inherit=${{parameters.product}}:GIT_TAG \
                 --log-level=DEBUG \
                 --static-configuration=${{parameters.repository}}/${{parameters.configurationFilePath}} \
                 --dependency='${{parameters.product}}->ivi-indigo:$(VERSION_PLATFORM)' \
                 --dependency='${{parameters.product}}->ivi-indigo-docs:$(VERSION_EXAMPLES)' \
                 --dependency='${{parameters.product}}->ivi-indigo-companion-app-android-communication:$(VERSION_COMMUNICATIONS_SDK)' \
                 --dependency='${{parameters.product}}->navapp-automotive:$(VERSION_NAVAPP_COMPONENTS)' \
                 --dependency='${{parameters.product}}->nav-tomtom-android-tools:$(VERSION_TOMTOM_ANDROID_TOOLS)' \
                 --dependency='${{parameters.product}}->nav-navtest-core:$(VERSION_NAVTESTCORE)' \
                 --dependency='${{parameters.product}}->nav-emulator-plugin:$(VERSION_NAVEMULATOR)' \
                 --dependency='${{parameters.product}}->ivi-indigo-alexa-auto-sdk:$(VERSION_ALEXAAUTOSDK)' \
                 --lock-configuration=$(Agent.TempDirectory)/bdtools.lock.yml

      bdt scan  --repo-type=LOCAL \
                --repository=${{parameters.repository}} \
                --host-type=LOCAL \
                --log-level=DEBUG \
                --log-folder=$(Agent.TempDirectory)/bdtoolslogs \
                --cache=$(Agent.TempDirectory)/bdtoolscache \
                --lock-configuration=$(Agent.TempDirectory)/bdtools.lock.yml
    env:
      BLACKDUCK_API_TOKEN: ${{parameters.bdApiToken}}
      BLACKDUCK_URL: ${{parameters.bdtoolsUrl}}
    displayName: Perform configuration and link project scans
    retryCountOnTaskFailure: 3
    timeoutInMinutes: 20
    condition: and(succeeded(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: ArchiveFiles@2
    displayName: 'Archive BlackDuck lock file'
    inputs:
      rootFolderOrFile: '$(Agent.TempDirectory)/bdtools.lock.yml'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/lockfile/bdtools.lock.tar.gz'
      replaceExistingArchive: true
    condition: and(succeededOrFailed(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish lock file in pipeline artifacts'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/lockfile/bdtools.lock.tar.gz'
      artifactName: scanning-lockfile-$(System.JobAttempt)
    condition: and(succeededOrFailed(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: ArchiveFiles@2
    displayName: 'Archive BlackDuck logs'
    inputs:
      rootFolderOrFile: '$(Agent.TempDirectory)/bdtoolslogs/'
      includeRootFolder: false
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/bdtoolslogs/bdtoolslogs.tar.gz'
      replaceExistingArchive: true
    condition: and(succeededOrFailed(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish logs in pipeline artifacts'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/bdtoolslogs/bdtoolslogs.tar.gz'
      artifactName: scanning-logs-$(System.JobAttempt)
    condition: and(succeededOrFailed(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  # TODO(IVI-9039): Enable compliance check on missing project links for OSS scan in SDK release pipeline
  - script: |
      # This will check the compliance and generate a JSON report based on the BOM of the project.
      # we are ignoring high operational risk warning from compliance check as it indicates an
      # outdated version of the 3rd party that may become deprecated soon component and can be
      # ignored for platform release.

      bdt compliance  --project ${{parameters.product}} \
                      --version ${{parameters.productVersion}} \
                      --report "$(Agent.TempDirectory)/${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).json" \
                      --timeout 300 \
                      --ignore-warning 301 \
                      --ignore-warning 302 \
                      --ignore-warning 306 \
                      --ignore-warning 307 \
                      --ignore-warning 309 \
                      --ignore-warning 311 \
                      --ignore-warning 314 \
                      --ignore-warning 315 \
                      --ignore-warning 318 \
                      --ignore-warning 319 \
                      --ignore-warning 320
    env:
      BLACKDUCK_API_TOKEN: ${{parameters.bdApiToken}}
      BLACKDUCK_URL: ${{parameters.bdtoolsUrl}}
    displayName: Generate report
    retryCountOnTaskFailure: 3
    condition: and(succeeded(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish output in pipeline artifacts'
    inputs:
      targetPath: '$(Agent.TempDirectory)/${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).json'
      artifactName: scanning-output-$(System.JobAttempt)
    condition: and(succeeded(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: PythonScript@0
    name: OSS_compliance_report
    displayName: 'Generate OSS compliance report.'
    inputs:
      scriptSource: 'filePath'
      scriptPath: ${{parameters.repository}}/docs/portal/scripts/oss_generator.py
      pythonInterpreter: /usr/bin/python3.8
      arguments:
        --output "$(Agent.TempDirectory)/${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).md"
        --markdown-table "$(Agent.TempDirectory)/${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).json"
        --version "$(VERSION_PLATFORM)-$(PATCH_VERSION)"
        --project-name "Digital Cockpit SDK"
    condition: and(eq(variables['Agent.JobStatus'], 'Succeeded'), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish OSS compliance report in pipeline artifacts'
    inputs:
      targetPath: '$(Agent.TempDirectory)/${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).md'
      artifactName: oss-report
    condition: and(succeeded(), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - template: publish/push-to-artifactory.yml@devops-templates
    parameters:
      currentProductVersion: "$(VERSION_PLATFORM)-$(PATCH_VERSION)"
      workingDirectory: "$(Agent.TempDirectory)"
      artifactId: "${{parameters.artifactoryLocation}}"
      folderOrFileName: "${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).md"
      condition: and(eq(variables['Agent.JobStatus'], 'Succeeded'), eq(variables['CompareVersions.scanAllowed'], 'True'))
  - template: publish/push-to-artifactory.yml@devops-templates
    parameters:
      currentProductVersion: "$(VERSION_PLATFORM)-$(PATCH_VERSION)"
      workingDirectory: "$(Agent.TempDirectory)"
      artifactId: "${{parameters.artifactoryLocation}}"
      folderOrFileName: "${{parameters.reportFilename}}_$(VERSION_PLATFORM)-$(PATCH_VERSION).json"
      condition: and(eq(variables['Agent.JobStatus'], 'Succeeded'), eq(variables['CompareVersions.scanAllowed'], 'True'))

  - template: azure/updatevariablegroup.yml@devops-templates
    parameters:
      endpoint: $(System.TeamFoundationCollectionUri)/$(System.TeamProject)
      groupName: 'ProductVersion'
      variableName: 'OSS_GROUP_REPORT_VERSION'
      variableValue: $(VERSION_PLATFORM)-$(PATCH_VERSION)
      condition: and(eq(variables['Agent.JobStatus'], 'Succeeded'), eq(variables['CompareVersions.scanAllowed'], 'True'))
