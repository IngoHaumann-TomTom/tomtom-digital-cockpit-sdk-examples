# Copyright Â© 2020 TomTom NV. All rights reserved.
#
# This software is the proprietary copyright of TomTom NV and its subsidiaries and may be
# used for internal evaluation purposes or commercial use strictly subject to separate
# license agreement between you and TomTom NV. If you are the licensee, you are only permitted
# to use this software in accordance with the terms of your license agreement. If you are
# not the licensee, you are not authorized to use this software in any manner and should
# immediately return or destroy it.

# Azure pipelines documentation is available at
# https://aka.ms/yaml

variables:
  - template: private-pool-agents/private-cloud-agents.yml@devops-templates
  - template: .azure-templates/variables.yml
  # Variable groups containing the passwords used below are defined in the project's Pipelines Library.
  - group: IviArtifactoryCredentials
  - group: HashiCorpVault
  - group: ArtifactorySaas
  # Access data required for CI pipeline to publish results from security vulnerabilities scanning.
  - group: bdtools-access-secrets
  - group: IviGradleCache
  - group: 'NavKit2ApiKey'
  # Use to limit jobs to builds of the 'master' branch, made on the pipeline whose definition id
  # is 1986 (the IndiGO Docs main pipeline).
  - name: isMainlineBuild
    value: $[ and(
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      eq(variables['System.DefinitionId'], 1986)
      ) ]
  - name: blackduckUrl
    ${{ if eq(variables['System.TeamProject'], 'IVI') }}:
      value: 'https://hub.tomtomgroup.com'
    ${{ else }}:
      value: 'https://blackduck-preprod.navkit-pipeline.tt3.com/'
  - name: blackduckApiToken
    ${{ if eq(variables['System.TeamProject'], 'IVI') }}:
      value: $(blackduck-prod-pat)
    ${{ else }}:
      value: $(blackduck-preprod-pat)

# Trigger builds on new commits on stable branches.
# Builds from PRs are triggered by the Branch Policy in the repo settings.
# Builds on `master` are batched together when possible, to reduce the number of
# concurrent builds from merged PRs.
trigger:
  batch: true
  branches:
    include:
      - 'master'
      - 'release/*'

resources:
  containers:
  # Docker containers with run options for private cloud agents and shared Gradle caches.
  - container: docker_indigo_build
    image: 'indigo/build:$(dockerImageVersion)'
    endpoint: 'IVI-Docker'
    options: $(dockerImageDefaultOptions)
  - container: docker_indigo_test
    image: 'indigo/test:$(dockerImageVersion)'
    endpoint: 'IVI-Docker'
    options: $(dockerImageTestingOptions)
  - container: docker_indigo_scanner
    image: 'indigo/scanner:$(dockerImageVersion)'
    endpoint: 'IVI-Docker'
    options: $(dockerImageTestingOptions)
  repositories:
  - repository: devops-templates
    type: git
    name: IVI/devops-templates
    ref: refs/tags/2.2.27
  - repository: indigoqa
    type: git
    name: IVI/indigo-qa

pool: 'IVI 2.0'

stages:
- stage: Vars
  displayName: Set up build properties
  jobs:
  - job: Properties
    displayName: Fetch product version and artifactory secret
    container: 'docker_indigo_build'
    steps:
    - template: .azure-templates/product-get-version.yml
    - template: hashi-corp-vault/get-artifactory-saas-secret.yml@devops-templates
      parameters:
        hcvAppRoleId: $(HCV_EDITOR_APPROLE_ID)
        hcvAppRoleSecretId: $(HCV_EDITOR_SECRET_ID)
        hcvSecretPath: 'users/$(ARTIFACTORY_EDITOR_USER)'

- stage: Build
  displayName: 'Build pipeline'
  dependsOn: Vars
  variables:
    product_version: $[ stageDependencies.Vars.Properties.outputs['version.product_version'] ]
    ARTIFACTORY_TOKEN: $[ stageDependencies.Vars.Properties.outputs['artifactory.SECRET'] ]
  jobs:
  - template: gradle/dependencies-scan.yml@devops-templates
    parameters:
      dependenciesTaskName: showAllDependencies
  - job: Build
    displayName: Lint & Build
    timeoutInMinutes: 45
    container: 'docker_indigo_build'
    steps:
    - template: .azure-templates/build-steps.yml
    - template: .azure-templates/portal_check.yml
    - template: build/build-cleanup.yml@devops-templates
  - job: BuildExternal
    displayName: Build for external use
    container: 'docker_indigo_build'
    steps:
      - bash: |
          set -eux
          rm -r buildSrc/tasks
          rm build.gradle.kts
          mv sdk-build.gradle.kts build.gradle.kts
        displayName: Replace build file
      - template: gradle/gradle.yml@devops-templates
        parameters:
          tasks: >-
            assemble
          projectOptions: >-
            -PiviVersion=$(product_version)
          displayName: 'Assemble APKs'
          condition: succeeded()

- stage: Test
  displayName: Test
  dependsOn: Vars
  variables:
    product_version: $[ stageDependencies.Vars.Properties.outputs['version.product_version'] ]
    ARTIFACTORY_TOKEN: $[ stageDependencies.Vars.Properties.outputs['artifactory.SECRET'] ]
  jobs:
  - job: UnitTests
    displayName: Unit tests
    container: 'docker_indigo_test'
    timeoutInMinutes: 30
    steps:
    - template: .azure-templates/test-unit.yml
      parameters:
        artifactName: unit-test
    - template: build/build-cleanup.yml@devops-templates
  - job: IntegrationTests
    displayName: Integration & E2E tests
    container: 'docker_indigo_test'
    timeoutInMinutes: 30
    steps:
    - template: .azure-templates/test-instrumented.yml
      parameters:
        artifactName: integration-test
        testTasks: >-
          runDebugAndroidTests
    - template: build/build-cleanup.yml@devops-templates

- stage: Analyse
  displayName: Analyse
  dependsOn:
    - Vars
    - Build
  variables:
    product_version: $[ stageDependencies.Vars.Properties.outputs['version.product_version'] ]
    ARTIFACTORY_TOKEN: $[ stageDependencies.Vars.Properties.outputs['artifactory.SECRET'] ]
  jobs:
  - job: SonarQube
    displayName: Run SonarQube analysis
    container: 'docker_indigo_build'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download unit-test-results
      inputs:
        artifact: unit-test-results
        path: $(Build.SourcesDirectory)
    - task: DownloadPipelineArtifact@2
      displayName: Download unit-test-results
      inputs:
        artifact: integration-test-results
        path: $(Build.SourcesDirectory)
    - template: .azure-templates/sonarqube-steps.yml

- stage: OSSCompliance
  dependsOn: Vars
  condition: and(eq(variables.isMainlineBuild, true), succeeded())
  displayName: OSS compliance scan
  variables:
    product_version: $[ stageDependencies.Vars.Properties.outputs['version.product_version'] ]
    ARTIFACTORY_TOKEN: $[ stageDependencies.Vars.Properties.outputs['artifactory.SECRET'] ]
  jobs:
  - job: OSSComplianceScan
    displayName: OSS compliance scan
    container: docker_indigo_scanner
    steps:
    - template: oss/scan-and-report.yml@devops-templates
      parameters:
        configurationFilePath: .azure-templates/bdtools.yml
        product: ivi-indigo-docs
        productVersion: $(product_version)
        reportFilename: products_indigo_examples
        artifactoryLocation: products_indigo_examples
        bdtoolsUrl: ${{variables.blackduckUrl}}
        bdApiToken: ${{variables.blackduckApiToken}}
        runComplianceCheck: true
        checkLicenseRisk: true
        checkSecurityRisk: true
    - template: mixer/notify-mixer.yml@devops-templates
      parameters:
        projectComponentUnit: 'PU AS'
        projectComponentName: 'TomTom Digital Cockpit'
        projectComponentVersion: $(product_version)
        scanToolName: 'BLACKDUCK'
        scanType: 'SCA'
        projectnameInTool: 'ivi-indigo-docs'
        versionnameInTool: $(product_version)

- stage: Publishing
  condition: and(eq(variables.isMainlineBuild, true), succeeded())
  dependsOn:
    - Vars
    - Analyse
    - OSSCompliance
  variables:
    product_version: $[ stageDependencies.Vars.Properties.outputs['version.product_version'] ]
    ARTIFACTORY_TOKEN: $[ stageDependencies.Vars.Properties.outputs['artifactory.SECRET'] ]
  jobs:
  - job: Publish
    container: 'docker_indigo_build'
    displayName: Publish artifacts
    steps:
    - template: .azure-templates/publishing.yml
  - job: PublishRepository
    displayName: Publishing Repository to Artifactory
    dependsOn: Publish
    condition: and(eq(variables.isMainlineBuild, true), succeeded())
    container: 'docker_indigo_build'
    steps:
    - bash: |
        set -eux
        ls -1A | xargs -d "\n" tar cfz products_indigo_examples-$(product_version)-sources.tar.gz
      displayName: Archive repository to tar
    - template: publish/push-to-artifactory.yml@devops-templates
      parameters:
        currentProductVersion: "$(product_version)"
        workingDirectory: "$(Build.SourcesDirectory)"
        artifactId: "products_indigo_examples"
        folderOrFileName: "products_indigo_examples-$(product_version)-sources.tar.gz"
        condition: and(eq(variables.isMainlineBuild, true), succeeded())

- stage: Metrics
  displayName: Collect Metrics
  dependsOn: [ Vars, Build, Test, Analyse, OSSCompliance, Publishing ]
  condition: eq(variables['System.TeamProject'], 'IVI')
  jobs:
    - template: metrics/start-metrics-pipeline.yml@devops-templates
